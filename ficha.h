#pragma once
#include<iostream>
#include<vector>
#include "color.h"

using namespace std;


typedef enum tShapes { T, S, Z, J, L, O, I };
typedef int tShapeArray[7][4][4][4];
typedef float tColorArray[7][3];

class tBag {
	
	private:
		vector<tShapes> bag{ T, S, Z, J, L, O, I };

	public:
		void refill();
		tShapes pick();


};

const tShapeArray shapeArray =
{
	{ // T
	{{0,1,0,0},
	 {1,1,1,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {0,1,1,0},
	 {0,1,0,0},
	 {0,0,0,0},
	},

	{{0,0,0,0},
	 {1,1,1,0},
	 {0,1,0,0},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {1,1,0,0},
	 {0,1,0,0},
	 {0,0,0,0},
	}
	},

	{ // S
	{{0,1,1,0},
	 {1,1,0,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {0,1,1,0},
	 {0,0,1,0},
	 {0,0,0,0},
	},

	{{0,0,0,0},
	 {0,1,1,0},
	 {1,1,0,0},
	 {0,0,0,0},
	},

	{{1,0,0,0},
	 {1,1,0,0},
	 {0,1,0,0},
	 {0,0,0,0},
	}
	},

	{ // Z
	{{1,1,0,0},
	 {0,1,1,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{0,0,1,0},
	 {0,1,1,0},
	 {0,1,0,0},
	 {0,0,0,0},
	},

	{{0,0,0,0},
	 {1,1,0,0},
	 {0,1,1,0},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {1,1,0,0},
	 {1,0,0,0},
	 {0,0,0,0},
	}
	},

	{ // J
	{{1,0,0,0},
	{ 1,1,1,0 },
	{ 0,0,0,0 },
	{ 0,0,0,0 },
	},

	{{0,1,1,0},
	 {0,1,0,0},
	 {0,1,0,0},
	 {0,0,0,0},
	},

	{{0,0,0,0},
	 {1,1,1,0},
	 {0,0,1,0},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {0,1,0,0},
	 {1,1,0,0},
	 {0,0,0,0},
	}
	},

	{ // L
	{{0,0,1,0},
	 {1,1,1,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {0,1,0,0},
	 {0,1,1,0},
	 {0,0,0,0},
	},

	{{0,0,0,0},
	 {1,1,1,0},
	 {1,0,0,0},
	 {0,0,0,0},
	},

	{{1,1,0,0},
	 {0,1,0,0},
	 {0,1,0,0},
	 {0,0,0,0},
	}
	},

	{ // O
	{{1,1,0,0},
	 {1,1,0,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{1,1,0,0},
	 {1,1,0,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{1,1,0,0},
	 {1,1,0,0},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{1,1,0,0},
	 {1,1,0,0},
	 {0,0,0,0},
	 {0,0,0,0},
	}
	},

	{ // I
	{{0,0,0,0},
	 {1,1,1,1},
	 {0,0,0,0},
	 {0,0,0,0},
	},

	{{0,0,1,0},
	 {0,0,1,0},
	 {0,0,1,0},
	 {0,0,1,0},
	},

	{{0,0,0,0},
	 {0,0,0,0},
	 {1,1,1,1},
	 {0,0,0,0},
	},

	{{0,1,0,0},
	 {0,1,0,0},
	 {0,1,0,0},
	 {0,1,0,0},
	}
	}
};

const tColorArray colorArray = {
	// T
	{0.611, 0.168, 0.8},

	// S
	{0.415, 1.0, 0.0},

	// Z
	{0.86, 0.153, 0.274},

	// L
	{0.137, 0.074, 0.729},

	// J
	{1.0, 0.514, 0.058},
	
	// O
	{1.0, 0.96, 0.0},

	// I 
	{0.0, 0.98, 0.929}
};

const int wallKick[2][8][5][2] = {

	// J, L, S, T, Z
	{
		/*0->1*/	{ {0,0}, {0,-1}, {1, -1}, {-2,0}, {-2,-1} }, //
		/*1->0*/	{ {0,0}, {0,1 }, {-1,1}, {2,0}, {2,1} },     //
		/*1->2*/	{ {0,0}, {0,1}, {-1,1}, {2,0}, {2,1} },      //
		/*2->1*/	{ {0,0}, {0,-1}, {1,-1}, {-2,0}, {-2,-1} },  //
		/*2->3*/	{ {0,0}, {0,1}, {1,1}, {-2,0}, {-2,1} },     //
		/*3->2*/	{ {0,0}, {0,-1}, {-1,-1}, {2,0}, {2,-1} },   //
		/*3->0*/	{ {0,0}, {0,-1}, {-1,-1}, {2,0}, {2,-1} },   //
		/*0->3*/	{ {0,0}, {0,1}, {1,1}, {-2, 0}, {-2,1} }     //

			},

	// I
	{
		/*0->1*/	{ {0,0}, {0,-2}, {0,1}, {-1,-2}, {2,1} }, //
		/*1->0*/	{ {0,0}, {0,2 }, {0,-1}, {1,2}, {-2,-1} },//
		/*1->2*/	{ {0,0}, {0,-1}, {0,2}, {2,-1}, {-1,2} }, //
		/*2->1*/	{ {0,0}, {0,1}, {0,-2}, {-2,1}, {1,-2} }, //
		/*2->3*/	{ {0,0}, {0,2}, {0,-1}, {1,2}, {-2,-1} }, //
		/*3->2*/	{ {0,0}, {0,-2}, {0,1}, {-1,-2}, {2,1} }, //
		/*3->0*/	{ {0,0}, {0,1}, {0,-2}, {-2,1}, {1,-2} }, //
		/*0->3*/	{ {0,0}, {0,-1}, {0,2}, {2,-1}, {-1,2} }, //
			}

};


class tFicha
{
	public:
		tFicha(tShapes shape1);
		pair<int, int> coords;
		RGB color;
		tShapes shape;
		int rotation = 0;
		pair<int, int> pos[4];
		void calcCoords();
	
};

